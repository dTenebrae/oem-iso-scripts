#!/bin/bash

# Падаем при ошибке
set -eo pipefail

# --- base dependencies ---
# genisoimage bsdtar lorax xorriso

# Цветной вывод. Использование: echo -e "${COLOR} some text ${NC}"
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\e[0m'

INPUT_FILE=$1
OUTPUT_FILE=$2
DIRNAME=$(dirname `readlink -e "$0"`)

################################### PATH ############################################

# Временные каталоги
UNPACKED_ISO="_unpacked"
TMP_REPO="_tmp"

# Заменяемые файлы
ISO_CFG="$UNPACKED_ISO/isolinux/isolinux.cfg"
GRUB_CFG="$UNPACKED_ISO/EFI/BOOT/grub.cfg"

# Внешние пути
KS_CFG_PATCHED="src/cfg/ks.cfg"
ISO_CFG_PATCHED="src/cfg/isolinux_patched.cfg"
GRUB_CFG_PATCHED="src/cfg/grub_patched.cfg"
ISO_HDPFX="src/isohdpfx.bin"
ANAC_RPM="src/rpms/anaconda-*"
INIT_RPM="src/rpms/initial-*"

####################### SANITY CHECKS & PREPARATIONS ################################

# Мы хотим запускаться от root'a
if [ "$EUID" -ne 0 ] ; then
    echo -e "${RED}Please run as root${NC}"
    exit
fi
# Без имени ISO работать сложно
if [ -z "$1" ] ; then
    echo -e "${RED}No input file supplied${NC}"
    exit
fi
# Если его не существует - тоже
if [ ! -f "$INPUT_FILE" ] ; then
    echo -e "${RED}Input file didn't exist${NC}"
    exit
fi
# Проверка на существование директории с конфигами и не только
if [ ! -d "$DIRNAME/src" ] ; then
    echo -e "${RED}No src folder in working directory${NC}"
    exit
fi
# Если директория есть, а нужных файлов в ней нет (TODO добавить проверку всех файлов)
if [[ ! -f $DIRNAME/$KS_CFG_PATCHED || ! -f $DIRNAME/$ISO_CFG_PATCHED  \
    || ! -f $DIRNAME/$GRUB_CFG_PATCHED ]] ; then
    echo -e "${RED}Some of necessary config files are absent${NC}"
    exit
fi

# Если второй аргумент не указан - имя выходного ISO создаем из входного
if [ -z "$2" ] ; then
      OUTPUT_FILE=$(printf '%s\n' "${INPUT_FILE%.iso}-kickstart.iso")
fi

# Проверяем, нет ли временных каталогов с прошлого запуска
[[ -d "$DIRNAME/$UNPACKED_ISO" ]] &&  rm -rvf "$DIRNAME/$UNPACKED_ISO"
[[ -d "$DIRNAME/$TMP_REPO" ]] &&      rm -rvf "$DIRNAME/$TMP_REPO"

# Создаем временные каталоги
mkdir -pv "$DIRNAME/$UNPACKED_ISO"
mkdir -pv "$DIRNAME/$TMP_REPO"

################################## UNPACKING  ######################################

# Распаковываем ISO
echo -e "${GREEN}Unpacking iso${NC}"
bsdtar \
    -x \
    -v \
    -C $DIRNAME/$UNPACKED_ISO \
    -f $INPUT_FILE

# Меняем права на человеческие
echo -e "${GREEN}Changing permissions${NC}"
chmod -Rv a-x+X,u-x+rwX,go-wx+rX $DIRNAME/$UNPACKED_ISO

# Вытаскиваем метку ISO из конфига
LABEL=$(grep -ri 'linuxefi'  $GRUB_CFG | awk -F '[:= ]' '{print $6}' | tail -n 1 | sed 's/\\x20/ /g')

################################### PATCHING ########################################

# Заменяем файлы на модифицированные
echo -e "${GREEN}Copying modified files${NC}"
cp -v $DIRNAME/$KS_CFG_PATCHED     $DIRNAME/$UNPACKED_ISO/
cp -v $DIRNAME/$ISO_CFG_PATCHED    $DIRNAME/$ISO_CFG
cp -v $DIRNAME/$GRUB_CFG_PATCHED   $DIRNAME/$GRUB_CFG

# То же самое для RPM (было бы неплохо, если их сначала собрали с помощью скрипта rebuild-rpm)
echo -e "${GREEN}Replacing RPMs${NC}"
cp -v $DIRNAME/$ANAC_RPM                         $DIRNAME/$UNPACKED_ISO/Packages/a/
cp -v $DIRNAME/$INIT_RPM                         $DIRNAME/$UNPACKED_ISO/Packages/i/
mv -v $DIRNAME/$UNPACKED_ISO/{Packages,repodata} $DIRNAME/$TMP_REPO/
cp -v $DIRNAME/$TMP_REPO/repodata/*comps*        $DIRNAME/$TMP_REPO/
mv -v $DIRNAME/$TMP_REPO/*comps.xml              $DIRNAME/$TMP_REPO/comps.xml

################################## FINALIZING #######################################

# Пересоберем репу, иначе хэши не сойдутся
echo -e "${GREEN}Updating repo${NC}"
createrepo --update $TMP_REPO/ --no-database -g comps.xml
mv -v $DIRNAME/$TMP_REPO/{Packages,repodata} $DIRNAME/$UNPACKED_ISO/

# Создадим efiboot
echo -e "${GREEN}Creating efiboot.img${NC}"
mkefiboot \
    --label=LIVEBOOT \
    --debug \
    $DIRNAME/$UNPACKED_ISO/EFI/BOOT $DIRNAME/$UNPACKED_ISO/images/efiboot.img

# Соберем ISO
echo -e "${GREEN}Creating new iso${NC}"

# -as mkisofs           - включает сет ключей mkisofs
# -isohybrid-mbr        - Приаттачим isohdpfx.bin(Syslinux) для дальнейшей обработки isohybrid'ом
# -c                    - имя El Torito(позволяет образу грузиться с CD) загрузочного каталога
# -b                    - имя El Torito загрузочного образа
# -no-emul-boot         - Говорит системе загрузить и запустить образ не выполняя эмуляцию
# -boot-load-size       - Определяет количество 512-byte секторов для загрузки в no-emul режиме. У некоторых BIOS будут сложности, если не кратно 4
# -boot-info-table      - Говорит, что 56-byte таблица с инфой о разметке CD будет запатчена со смещением 8. Зачем - хз.
# -eltorito-alt-boot    - С этого места определяем параметры конкретно для загрузки El Torito
# -e                    - Путь к EFI образу
# -no-emul-boot         - см. выше
# -isohybrid-gpt-basdat - пометить El Torito загрузочный образ как Basic Data в GPT
# -R                    - Сгенерировать Rock Ridge(семантика файловой системы UNIX) информацию для каталогов.
# -J                    - Включить Joliet расширение для стандарта ISO9660 (смягчает ограничения имен файлов)
# -joliet-long          - Разрешает Joliet-именам файлов быть длиной до 103 Unicode символов
# -V                    - Метка тома
# -o                    - куда и откуда пишем > выходной файл : папка с распакованным образом

xorriso \
    -as mkisofs \
    -isohybrid-mbr $DIRNAME/$ISO_HDPFX \
    -c isolinux/boot.cat \
    -b isolinux/isolinux.bin \
    -no-emul-boot \
    -boot-load-size 4 \
    -boot-info-table \
    -eltorito-alt-boot \
    -e images/efiboot.img \
    -no-emul-boot \
    -isohybrid-gpt-basdat \
    -R \
    -J \
    -joliet-long \
    -V "$LABEL" \
    -o $OUTPUT_FILE $DIRNAME/$UNPACKED_ISO

# Приделаем к нему uefi загрузчик
echo -e "${GREEN}Joining uefi bootloader to ISO${NC}"
isohybrid \
    --uefi $OUTPUT_FILE \
    --verbose

# Удалим временные каталоги
echo -e "${GREEN}Deleting temporary folders${NC}"
rm -rf "$DIRNAME/$TMP_REPO"
rm -rf "$DIRNAME/$UNPACKED_ISO"
