#!/bin/bash

set -eo pipefail

# --- base dependencies ---
# genisoimage bsdtar lorax xorriso

# Color for output. Usage: echo -e "${COLOR} some text ${NC}"
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\e[0m'

INPUT_FILE=$1
OUTPUT_FILE=$2
DIRNAME=$(dirname `readlink -e "$0"`)

################################### PATH ############################################

ISO_CFG="unpacked/isolinux/isolinux.cfg"
GRUB_CFG="unpacked/EFI/BOOT/grub.cfg"

# external files
KS_CFG_PATCHED="src/cfg/ks.cfg"
ISO_CFG_PATCHED="src/cfg/isolinux_patched.cfg"
GRUB_CFG_PATCHED="src/cfg/grub_patched.cfg"
ISO_HDPFX="src/isohdpfx.bin"
ANAC_RPM="src/rpms/anaconda-*"
INIT_RPM="src/rpms/initial-*"

####################### SANITY CHECKS & PREPARATIONS ################################

if [ "$EUID" -ne 0 ] ; then
    echo -e "${RED}Please run as root${NC}"
    exit
fi

if [ -z "$1" ] ; then
    echo -e "${RED}No input file supplied${NC}"
    exit
fi

if [ ! -f "$INPUT_FILE" ] ; then
    echo -e "${RED}Input file didn't exist${NC}"
    exit
fi

if [ ! -d "$DIRNAME/src" ] ; then
    echo -e "${RED}No src folder in working directory${NC}"
    exit
fi

if [[ ! -f $KS_CFG_PATCHED || ! -f $ISO_CFG_PATCHED  || ! -f $GRUB_CFG_PATCHED ]] ; then
    echo -e "${RED}Some of necessary config files absent${NC}"
    exit
fi

# if no second argument - create output path by changing input
if [ -z "$2" ] ; then
      OUTPUT_FILE=$(printf '%s\n' "${INPUT_FILE%.iso}-kickstart.iso")
fi


[[ -d "$DIRNAME/_squashfs" ]] && rm -rvf "$DIRNAME/_squashfs"
[[ -d "$DIRNAME/unpacked" ]] &&  rm -rvf "$DIRNAME/unpacked"
[[ -d "$DIRNAME/_tmp" ]] &&      rm -rvf "$DIRNAME/_tmp"
[[ -d "$DIRNAME/mnt" ]] &&       rm -rvf "$DIRNAME/mnt"

mkdir -pv "$DIRNAME/unpacked"
mkdir -pv "$DIRNAME/_tmp"

################################## UNPACKING  ######################################

echo -e "${GREEN}Unpacking iso${NC}"
bsdtar -x \
    -v \
    -C $DIRNAME/unpacked \
    -f $INPUT_FILE

echo -e "${GREEN}Changing permissions${NC}"
chmod -Rv a-x+X,u-x+rwX,go-wx+rX $DIRNAME/unpacked

# find label name, take first instance and replace escape sequence of space with space itself
LABEL=$(grep -ri 'linuxefi'  $GRUB_CFG | awk -F '[:= ]' '{print $6}' | tail -n 1 | sed 's/\\x20/ /g')

################################### PATCHING ########################################

echo -e "${GREEN}Copying modified files${NC}"
cp -v $DIRNAME/$KS_CFG_PATCHED     $DIRNAME/unpacked/
cp -v $DIRNAME/$ISO_CFG_PATCHED    $DIRNAME/$ISO_CFG
cp -v $DIRNAME/$GRUB_CFG_PATCHED   $DIRNAME/$GRUB_CFG

echo -e "${GREEN}Replacing RPMs${NC}"
cp -v $DIRNAME/$ANAC_RPM                    $DIRNAME/unpacked/Packages/a/
cp -v $DIRNAME/$INIT_RPM                    $DIRNAME/unpacked/Packages/i/
mv -v $DIRNAME/unpacked/{Packages,repodata} $DIRNAME/_tmp/
cp -v $DIRNAME/_tmp/repodata/*comps*        $DIRNAME/_tmp/
mv -v $DIRNAME/_tmp/*comps.xml              $DIRNAME/_tmp/comps.xml

################################## FINALIZING #######################################

echo -e "${GREEN}Updating repo${NC}"
createrepo --update _tmp/ --no-database -g comps.xml
mv -v $DIRNAME/_tmp/{Packages,repodata} $DIRNAME/unpacked/
rm -rvf "$DIRNAME/_tmp"

# Not sure, if we have to delete TRANS.TBL
find $DIRNAME/unpacked -iname "trans.tbl" -delete

# create efi image
mkefiboot \
    --label=LIVEBOOT \
    --debug \
    $DIRNAME/unpacked/EFI/BOOT $DIRNAME/unpacked/images/efiboot.img

# create iso
echo -e "${GREEN}Creating new iso${NC}"
xorriso \
    -as mkisofs \
    -isohybrid-mbr $DIRNAME/$ISO_HDPFX \
    -c isolinux/boot.cat \
    -b isolinux/isolinux.bin \
    -no-emul-boot \
    -boot-load-size 4 \
    -boot-info-table \
    -eltorito-alt-boot \
    -e images/efiboot.img \
    -no-emul-boot \
    -isohybrid-gpt-basdat \
    -R \
    -J \
    -joliet-long \
    -V "$LABEL" \
    -o $OUTPUT_FILE $DIRNAME/unpacked

# attach uefi bootloader
isohybrid \
    --uefi $OUTPUT_FILE \
    --verbose

#rm -rvf "$DIRNAME/unpacked"
